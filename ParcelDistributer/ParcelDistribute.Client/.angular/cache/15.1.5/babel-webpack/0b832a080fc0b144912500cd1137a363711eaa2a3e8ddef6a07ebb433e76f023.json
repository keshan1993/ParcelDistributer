{"ast":null,"code":"var isFunction = function (fn) {\n  return typeof fn === 'function';\n};\n/**\n * Subscription sink that holds Observable subscriptions\n * until you call unsubscribe on it in ngOnDestroy.\n */\nvar SubSink = /** @class */function () {\n  /**\n   * Subscription sink that holds Observable subscriptions\n   * until you call unsubscribe on it in ngOnDestroy.\n   *\n   * @example\n   * In Angular:\n   * ```\n   *   private subs = new SubSink();\n   *   ...\n   *   this.subs.sink = observable$.subscribe(...)\n   *   this.subs.add(observable$.subscribe(...));\n   *   ...\n   *   ngOnDestroy() {\n   *     this.subs.unsubscribe();\n   *   }\n   * ```\n   */\n  function SubSink() {\n    this._subs = [];\n  }\n  /**\n   * Add subscriptions to the tracked subscriptions\n   * @example\n   *  this.subs.add(observable$.subscribe(...));\n   */\n  SubSink.prototype.add = function () {\n    var subscriptions = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      subscriptions[_i] = arguments[_i];\n    }\n    this._subs = this._subs.concat(subscriptions);\n  };\n  Object.defineProperty(SubSink.prototype, \"sink\", {\n    /**\n     * Assign subscription to this sink to add it to the tracked subscriptions\n     * @example\n     *  this.subs.sink = observable$.subscribe(...);\n     */\n    set: function (subscription) {\n      this._subs.push(subscription);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Unsubscribe to all subscriptions in ngOnDestroy()\n   * @example\n   *   ngOnDestroy() {\n   *     this.subs.unsubscribe();\n   *   }\n   */\n  SubSink.prototype.unsubscribe = function () {\n    this._subs.forEach(function (sub) {\n      return sub && isFunction(sub.unsubscribe) && sub.unsubscribe();\n    });\n    this._subs = [];\n  };\n  return SubSink;\n}();\nexport { SubSink };","map":{"version":3,"names":["isFunction","fn","SubSink","_subs","prototype","add","subscriptions","_i","arguments","length","concat","Object","defineProperty","set","subscription","push","enumerable","configurable","unsubscribe","forEach","sub"],"sources":["C:/Users/ESyAdmin/Desktop/QualitApps/ParcelDistributer/ParcelDistribute.Client/node_modules/subsink/dist/es2015/subsink.js"],"sourcesContent":["var isFunction = function (fn) { return typeof fn === 'function'; };\n/**\n * Subscription sink that holds Observable subscriptions\n * until you call unsubscribe on it in ngOnDestroy.\n */\nvar SubSink = /** @class */ (function () {\n    /**\n     * Subscription sink that holds Observable subscriptions\n     * until you call unsubscribe on it in ngOnDestroy.\n     *\n     * @example\n     * In Angular:\n     * ```\n     *   private subs = new SubSink();\n     *   ...\n     *   this.subs.sink = observable$.subscribe(...)\n     *   this.subs.add(observable$.subscribe(...));\n     *   ...\n     *   ngOnDestroy() {\n     *     this.subs.unsubscribe();\n     *   }\n     * ```\n     */\n    function SubSink() {\n        this._subs = [];\n    }\n    /**\n     * Add subscriptions to the tracked subscriptions\n     * @example\n     *  this.subs.add(observable$.subscribe(...));\n     */\n    SubSink.prototype.add = function () {\n        var subscriptions = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            subscriptions[_i] = arguments[_i];\n        }\n        this._subs = this._subs.concat(subscriptions);\n    };\n    Object.defineProperty(SubSink.prototype, \"sink\", {\n        /**\n         * Assign subscription to this sink to add it to the tracked subscriptions\n         * @example\n         *  this.subs.sink = observable$.subscribe(...);\n         */\n        set: function (subscription) {\n            this._subs.push(subscription);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Unsubscribe to all subscriptions in ngOnDestroy()\n     * @example\n     *   ngOnDestroy() {\n     *     this.subs.unsubscribe();\n     *   }\n     */\n    SubSink.prototype.unsubscribe = function () {\n        this._subs.forEach(function (sub) { return sub && isFunction(sub.unsubscribe) && sub.unsubscribe(); });\n        this._subs = [];\n    };\n    return SubSink;\n}());\nexport { SubSink };\n"],"mappings":"AAAA,IAAIA,UAAU,GAAG,UAAUC,EAAE,EAAE;EAAE,OAAO,OAAOA,EAAE,KAAK,UAAU;AAAE,CAAC;AACnE;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAG,aAAe,YAAY;EACrC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,OAAO,GAAG;IACf,IAAI,CAACC,KAAK,GAAG,EAAE;EACnB;EACA;AACJ;AACA;AACA;AACA;EACID,OAAO,CAACE,SAAS,CAACC,GAAG,GAAG,YAAY;IAChC,IAAIC,aAAa,GAAG,EAAE;IACtB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC1CD,aAAa,CAACC,EAAE,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;IACrC;IACA,IAAI,CAACJ,KAAK,GAAG,IAAI,CAACA,KAAK,CAACO,MAAM,CAACJ,aAAa,CAAC;EACjD,CAAC;EACDK,MAAM,CAACC,cAAc,CAACV,OAAO,CAACE,SAAS,EAAE,MAAM,EAAE;IAC7C;AACR;AACA;AACA;AACA;IACQS,GAAG,EAAE,UAAUC,YAAY,EAAE;MACzB,IAAI,CAACX,KAAK,CAACY,IAAI,CAACD,YAAY,CAAC;IACjC,CAAC;IACDE,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACIf,OAAO,CAACE,SAAS,CAACc,WAAW,GAAG,YAAY;IACxC,IAAI,CAACf,KAAK,CAACgB,OAAO,CAAC,UAAUC,GAAG,EAAE;MAAE,OAAOA,GAAG,IAAIpB,UAAU,CAACoB,GAAG,CAACF,WAAW,CAAC,IAAIE,GAAG,CAACF,WAAW,EAAE;IAAE,CAAC,CAAC;IACtG,IAAI,CAACf,KAAK,GAAG,EAAE;EACnB,CAAC;EACD,OAAOD,OAAO;AAClB,CAAC,EAAG;AACJ,SAASA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}